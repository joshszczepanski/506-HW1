---
title: "HW-1Quarto"
format: html
editor: visual
---


```{r}
# Install necessary packages

#install.packages("tidyverse")    # Includes dplyr, ggplot2, readr, etc.
#install.packages("readr")        # For reading .csv and .txt files
#install.packages("dplyr")        # For data manipulation
#install.packages("ggplot2")      # For plotting (if needed)
#install.packages("stringr")      # For string manipulation
#install.packages("purrr")        # For functional programming
#install.packages("tibble")       # Enhanced data frames
#install.packages("broom")        # For tidying statistical output
#install.packages("data.table")   # Efficient data import/manipulation
#install.packages("janitor")      # For cleaning variable names
#install.packages("psych")        # For correlation matrices and descriptives


#1 a)

#Import the data frame "abalone"
abalone <- read.table("/Users/joshszczepanski/Downloads/abalone/abalone.data", sep = ",", header = FALSE)

#Assign appropriate column names
colnames(abalone) <- c(
  "sex", "length", "diameter", "height",
  "whole_weight", "shucked_weight",
  "viscera_weight", "shell_weight",
  "rings")


#1 b)
#Generate a table that shows the number of observations belonging to each sex
table(abalone$sex)

# The table shows F: 1307, I: 1342, M: 1528


#1 c1)
#Isolate just the weights and rings columns
allweights_and_rings_column <- abalone[ ,c("whole_weight", "shucked_weight",
  "viscera_weight", "shell_weight", "rings")]
                      
# Compute correlations between the first 4 columns (the weights) and the 'rings' column using sapply
correlations_with_rings <- sapply(allweights_and_rings_column[1:4], function(x) cor(x, allweights_and_rings_column$rings))

correlations_with_rings

# Identify which weight has the highest correlation.  

# **Attribution of Sources Note: Here I used assistance from Microsoft Copilot to help figure out that I need to use the "names" function. Initially, I wrote which.max(correlations_with_rings) and that just returned me the column number '4'

max_cor_weight <- names(which.max(correlations_with_rings))

# Identify correlation of highest correlating weight.
max_cor_value <- max(correlations_with_rings)


#display weight with highest correlation and its value
max_cor_weight
max_cor_value

# The weight with the highest correlation is: shell_weight it has a correlation of 0.6276 

#c2

#Isolate each sex 
abalone_F <- abalone[abalone$sex == "F", ]
abalone_M <- abalone[abalone$sex == "M", ]
abalone_I <- abalone[abalone$sex == "I", ]

# Store the correlations of shell weight and rings for each isolated sex
correlation_F <- cor(abalone_F$shell_weight, abalone_F$rings)
correlation_M <- cor(abalone_M$shell_weight, abalone_M$rings)
correlation_I <- cor(abalone_I$shell_weight, abalone_I$rings)

# Store correlations into one vector

# **Attribution of Sources Note: Here I used assistance from Microsoft Copilot to help me figure out that I needed to set each correlation equal to the original sex names and couldn't just write c(correlation_F, correlation_M, correlation_I)

correlation_by_sex <- c(F = correlation_F, M = correlation_M, I = correlation_I)

# Display the correlations
correlation_by_sex

# Identify the sex with the highest correlation
highest_cor_sex <- names(which.max(correlation_by_sex))

# Display the sex showing the highest correlation
highest_cor_sex


#C3

#Identify the abalone with the most rings
abalone_most_rings <- which.max(abalone$rings)

#Show the weights for this abalone
abalone[abalone_most_rings, c("whole_weight", "shucked_weight", "viscera_weight", "shell_weight")]

#C4

amt_viscwt_gt_shellwt <- sum(abalone$viscera_weight > abalone$shell_weight)

amt_viscwt_gt_shellwt

total_abalones <- nrow(abalone)

percent_viscwt_gt_shellwt <- (amt_viscwt_gt_shellwt/total_abalones)

percent_viscwt_gt_shellwt
```

